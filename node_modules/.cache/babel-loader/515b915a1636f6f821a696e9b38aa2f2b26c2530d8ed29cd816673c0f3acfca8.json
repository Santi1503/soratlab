{"ast":null,"code":"export const bubbleSort = array => {\n  const steps = [];\n  const n = array.length;\n  const arr = [...array];\n  for (let i = 0; i < n - 1; i++) {\n    for (let j = 0; j < n - i - 1; j++) {\n      steps.push({\n        array: [...arr],\n        activeIndices: [j, j + 1],\n        sortedIndices: Array.from({\n          length: i\n        }, (_, k) => n - 1 - k),\n        comparingIndices: [j, j + 1]\n      });\n      if (arr[j] > arr[j + 1]) {\n        [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n        steps.push({\n          array: [...arr],\n          activeIndices: [j, j + 1],\n          sortedIndices: Array.from({\n            length: i\n          }, (_, k) => n - 1 - k),\n          comparingIndices: [j, j + 1]\n        });\n      }\n    }\n  }\n  return {\n    array: arr,\n    steps,\n    currentStep: 0\n  };\n};\nexport const quickSort = array => {\n  const steps = [];\n  const arr = [...array];\n  const partition = (low, high) => {\n    const pivot = arr[high];\n    let i = low - 1;\n    for (let j = low; j < high; j++) {\n      steps.push({\n        array: [...arr],\n        activeIndices: [j, high],\n        sortedIndices: [],\n        comparingIndices: [j, high]\n      });\n      if (arr[j] < pivot) {\n        i++;\n        [arr[i], arr[j]] = [arr[j], arr[i]];\n        steps.push({\n          array: [...arr],\n          activeIndices: [i, j],\n          sortedIndices: [],\n          comparingIndices: [i, j]\n        });\n      }\n    }\n    [arr[i + 1], arr[high]] = [arr[high], arr[i + 1]];\n    steps.push({\n      array: [...arr],\n      activeIndices: [i + 1, high],\n      sortedIndices: [],\n      comparingIndices: [i + 1, high]\n    });\n    return i + 1;\n  };\n  const sort = (low, high) => {\n    if (low < high) {\n      const pi = partition(low, high);\n      sort(low, pi - 1);\n      sort(pi + 1, high);\n    }\n  };\n  sort(0, arr.length - 1);\n  return {\n    array: arr,\n    steps,\n    currentStep: 0\n  };\n};\nexport const mergeSort = array => {\n  const steps = [];\n  const arr = [...array];\n  const merge = (left, right, start) => {\n    const result = [];\n    let leftIndex = 0;\n    let rightIndex = 0;\n    while (leftIndex < left.length && rightIndex < right.length) {\n      steps.push({\n        array: [...arr],\n        activeIndices: [start + leftIndex, start + left.length + rightIndex],\n        sortedIndices: [],\n        comparingIndices: [start + leftIndex, start + left.length + rightIndex]\n      });\n      if (left[leftIndex] < right[rightIndex]) {\n        result.push(left[leftIndex]);\n        leftIndex++;\n      } else {\n        result.push(right[rightIndex]);\n        rightIndex++;\n      }\n    }\n    return result.concat(left.slice(leftIndex)).concat(right.slice(rightIndex));\n  };\n  const sort = (arr, start = 0) => {\n    if (arr.length <= 1) return arr;\n    const middle = Math.floor(arr.length / 2);\n    const left = arr.slice(0, middle);\n    const right = arr.slice(middle);\n    return merge(sort(left, start), sort(right, start + middle), start);\n  };\n  const sorted = sort(arr);\n  for (let i = 0; i < sorted.length; i++) {\n    arr[i] = sorted[i];\n    steps.push({\n      array: [...arr],\n      activeIndices: [i],\n      sortedIndices: Array.from({\n        length: i\n      }, (_, k) => k),\n      comparingIndices: [i]\n    });\n  }\n  return {\n    array: arr,\n    steps,\n    currentStep: 0\n  };\n};\nexport const insertionSort = array => {\n  const steps = [];\n  const arr = [...array];\n  for (let i = 1; i < arr.length; i++) {\n    let j = i;\n    while (j > 0 && arr[j - 1] > arr[j]) {\n      steps.push({\n        array: [...arr],\n        activeIndices: [j - 1, j],\n        sortedIndices: Array.from({\n          length: i\n        }, (_, k) => k),\n        comparingIndices: [j - 1, j]\n      });\n      [arr[j - 1], arr[j]] = [arr[j], arr[j - 1]];\n      j--;\n      steps.push({\n        array: [...arr],\n        activeIndices: [j, j + 1],\n        sortedIndices: Array.from({\n          length: i\n        }, (_, k) => k),\n        comparingIndices: [j, j + 1]\n      });\n    }\n  }\n  return {\n    array: arr,\n    steps,\n    currentStep: 0\n  };\n};\nexport const selectionSort = array => {\n  const steps = [];\n  const arr = [...array];\n  for (let i = 0; i < arr.length - 1; i++) {\n    let minIndex = i;\n    for (let j = i + 1; j < arr.length; j++) {\n      steps.push({\n        array: [...arr],\n        activeIndices: [minIndex, j],\n        sortedIndices: Array.from({\n          length: i\n        }, (_, k) => k),\n        comparingIndices: [minIndex, j]\n      });\n      if (arr[j] < arr[minIndex]) {\n        minIndex = j;\n      }\n    }\n    if (minIndex !== i) {\n      [arr[i], arr[minIndex]] = [arr[minIndex], arr[i]];\n      steps.push({\n        array: [...arr],\n        activeIndices: [i, minIndex],\n        sortedIndices: Array.from({\n          length: i + 1\n        }, (_, k) => k),\n        comparingIndices: [i, minIndex]\n      });\n    }\n  }\n  return {\n    array: arr,\n    steps,\n    currentStep: 0\n  };\n};\nexport const heapSort = array => {\n  const steps = [];\n  const n = array.length;\n  const arr = [...array];\n  const heapify = (arr, n, i, steps) => {\n    let largest = i;\n    const l = 2 * i + 1;\n    const r = 2 * i + 2;\n    if (l < n && arr[l] > arr[largest]) {\n      largest = l;\n    }\n    if (r < n && arr[r] > arr[largest]) {\n      largest = r;\n    }\n    if (largest !== i) {\n      [arr[i], arr[largest]] = [arr[largest], arr[i]];\n      steps.push({\n        array: [...arr],\n        activeIndices: [i, largest],\n        comparingIndices: [l, r],\n        sortedIndices: []\n      });\n      heapify(arr, n, largest, steps);\n    }\n  };\n\n  // Build max heap\n  for (let i = Math.floor(n / 2) - 1; i >= 0; i--) {\n    heapify(arr, n, i, steps);\n  }\n\n  // Extract elements from heap\n  for (let i = n - 1; i > 0; i--) {\n    [arr[0], arr[i]] = [arr[i], arr[0]];\n    steps.push({\n      array: [...arr],\n      activeIndices: [0, i],\n      comparingIndices: [],\n      sortedIndices: Array.from({\n        length: n - i\n      }, (_, j) => i + j)\n    });\n    heapify(arr, i, 0, steps);\n  }\n  steps.push({\n    array: [...arr],\n    activeIndices: [],\n    comparingIndices: [],\n    sortedIndices: Array.from({\n      length: n\n    }, (_, i) => i)\n  });\n  return {\n    array: arr,\n    steps,\n    currentStep: 0\n  };\n};\nexport const shellSort = array => {\n  const steps = [];\n  const n = array.length;\n  const arr = [...array];\n  for (let gap = Math.floor(n / 2); gap > 0; gap = Math.floor(gap / 2)) {\n    for (let i = gap; i < n; i++) {\n      const temp = arr[i];\n      let j;\n      for (j = i; j >= gap && arr[j - gap] > temp; j -= gap) {\n        arr[j] = arr[j - gap];\n        steps.push({\n          array: [...arr],\n          activeIndices: [j, j - gap],\n          comparingIndices: [i, j - gap],\n          sortedIndices: []\n        });\n      }\n      arr[j] = temp;\n      steps.push({\n        array: [...arr],\n        activeIndices: [j, i],\n        comparingIndices: [i, j],\n        sortedIndices: []\n      });\n    }\n  }\n  steps.push({\n    array: [...arr],\n    activeIndices: [],\n    comparingIndices: [],\n    sortedIndices: Array.from({\n      length: n\n    }, (_, i) => i)\n  });\n  return {\n    array: arr,\n    steps,\n    currentStep: 0\n  };\n};\nexport const countingSort = array => {\n  const steps = [];\n  const n = array.length;\n  const arr = [...array];\n  const max = Math.max(...arr);\n  const count = new Array(max + 1).fill(0);\n  const output = new Array(n);\n\n  // Count occurrences\n  for (let i = 0; i < n; i++) {\n    count[arr[i]]++;\n    steps.push({\n      array: [...arr],\n      activeIndices: [i],\n      comparingIndices: [arr[i]],\n      sortedIndices: []\n    });\n  }\n\n  // Modify count[i] to store position\n  for (let i = 1; i <= max; i++) {\n    count[i] += count[i - 1];\n  }\n\n  // Build output array\n  for (let i = n - 1; i >= 0; i--) {\n    output[count[arr[i]] - 1] = arr[i];\n    count[arr[i]]--;\n    steps.push({\n      array: [...output],\n      activeIndices: [count[arr[i]]],\n      comparingIndices: [arr[i]],\n      sortedIndices: []\n    });\n  }\n  steps.push({\n    array: [...output],\n    activeIndices: [],\n    comparingIndices: [],\n    sortedIndices: Array.from({\n      length: n\n    }, (_, i) => i)\n  });\n  return {\n    array: output,\n    steps,\n    currentStep: 0\n  };\n};\nexport const radixSort = array => {\n  const steps = [];\n  const n = array.length;\n  let arr = [...array];\n  const max = Math.max(...arr);\n  for (let exp = 1; Math.floor(max / exp) > 0; exp *= 10) {\n    const output = new Array(n);\n    const count = new Array(10).fill(0);\n    for (let i = 0; i < n; i++) {\n      count[Math.floor(arr[i] / exp) % 10]++;\n      steps.push({\n        array: [...arr],\n        activeIndices: [i],\n        comparingIndices: [Math.floor(arr[i] / exp) % 10],\n        sortedIndices: []\n      });\n    }\n    for (let i = 1; i < 10; i++) {\n      count[i] += count[i - 1];\n    }\n    for (let i = n - 1; i >= 0; i--) {\n      const digit = Math.floor(arr[i] / exp) % 10;\n      output[count[digit] - 1] = arr[i];\n      count[digit]--;\n      steps.push({\n        array: [...output],\n        activeIndices: [count[digit]],\n        comparingIndices: [digit],\n        sortedIndices: []\n      });\n    }\n    arr = output;\n  }\n  steps.push({\n    array: [...arr],\n    activeIndices: [],\n    comparingIndices: [],\n    sortedIndices: Array.from({\n      length: n\n    }, (_, i) => i)\n  });\n  return {\n    array: arr,\n    steps,\n    currentStep: 0\n  };\n};\nexport const bucketSort = array => {\n  const steps = [];\n  const n = array.length;\n  const arr = [...array];\n  const max = Math.max(...arr);\n  const min = Math.min(...arr);\n  const bucketSize = 5;\n  const bucketCount = Math.floor((max - min) / bucketSize) + 1;\n  const buckets = Array.from({\n    length: bucketCount\n  }, () => []);\n  for (let i = 0; i < n; i++) {\n    const bucketIndex = Math.floor((arr[i] - min) / bucketSize);\n    buckets[bucketIndex].push(arr[i]);\n    steps.push({\n      array: [...arr],\n      activeIndices: [i],\n      comparingIndices: [bucketIndex],\n      sortedIndices: []\n    });\n  }\n  let index = 0;\n  for (let i = 0; i < bucketCount; i++) {\n    buckets[i].sort((a, b) => a - b);\n    for (let j = 0; j < buckets[i].length; j++) {\n      arr[index++] = buckets[i][j];\n      steps.push({\n        array: [...arr],\n        activeIndices: [index - 1],\n        comparingIndices: [i, j],\n        sortedIndices: []\n      });\n    }\n  }\n  steps.push({\n    array: [...arr],\n    activeIndices: [],\n    comparingIndices: [],\n    sortedIndices: Array.from({\n      length: n\n    }, (_, i) => i)\n  });\n  return {\n    array: arr,\n    steps,\n    currentStep: 0\n  };\n};\nexport const cocktailSort = array => {\n  const steps = [];\n  const n = array.length;\n  const arr = [...array];\n  let swapped = true;\n  let start = 0;\n  let end = n - 1;\n  while (swapped) {\n    swapped = false;\n    for (let i = start; i < end; i++) {\n      if (arr[i] > arr[i + 1]) {\n        [arr[i], arr[i + 1]] = [arr[i + 1], arr[i]];\n        swapped = true;\n        steps.push({\n          array: [...arr],\n          activeIndices: [i, i + 1],\n          comparingIndices: [],\n          sortedIndices: []\n        });\n      }\n    }\n    if (!swapped) break;\n    swapped = false;\n    end--;\n    for (let i = end - 1; i >= start; i--) {\n      if (arr[i] > arr[i + 1]) {\n        [arr[i], arr[i + 1]] = [arr[i + 1], arr[i]];\n        swapped = true;\n        steps.push({\n          array: [...arr],\n          activeIndices: [i, i + 1],\n          comparingIndices: [],\n          sortedIndices: []\n        });\n      }\n    }\n    start++;\n  }\n  steps.push({\n    array: [...arr],\n    activeIndices: [],\n    comparingIndices: [],\n    sortedIndices: Array.from({\n      length: n\n    }, (_, i) => i)\n  });\n  return {\n    array: arr,\n    steps,\n    currentStep: 0\n  };\n};\nexport const gnomeSort = array => {\n  const steps = [];\n  const n = array.length;\n  const arr = [...array];\n  let index = 0;\n  while (index < n) {\n    if (index === 0) {\n      index++;\n    }\n    if (arr[index] >= arr[index - 1]) {\n      index++;\n    } else {\n      [arr[index], arr[index - 1]] = [arr[index - 1], arr[index]];\n      steps.push({\n        array: [...arr],\n        activeIndices: [index, index - 1],\n        comparingIndices: [],\n        sortedIndices: []\n      });\n      index--;\n    }\n  }\n  steps.push({\n    array: [...arr],\n    activeIndices: [],\n    comparingIndices: [],\n    sortedIndices: Array.from({\n      length: n\n    }, (_, i) => i)\n  });\n  return {\n    array: arr,\n    steps,\n    currentStep: 0\n  };\n};\nexport const combSort = array => {\n  const steps = [];\n  const n = array.length;\n  const arr = [...array];\n  let gap = n;\n  let swapped = true;\n  const shrink = 1.3;\n  while (gap > 1 || swapped) {\n    gap = Math.floor(gap / shrink);\n    if (gap < 1) gap = 1;\n    swapped = false;\n    for (let i = 0; i + gap < n; i++) {\n      if (arr[i] > arr[i + gap]) {\n        [arr[i], arr[i + gap]] = [arr[i + gap], arr[i]];\n        swapped = true;\n        steps.push({\n          array: [...arr],\n          activeIndices: [i, i + gap],\n          comparingIndices: [],\n          sortedIndices: []\n        });\n      }\n    }\n  }\n  steps.push({\n    array: [...arr],\n    activeIndices: [],\n    comparingIndices: [],\n    sortedIndices: Array.from({\n      length: n\n    }, (_, i) => i)\n  });\n  return {\n    array: arr,\n    steps,\n    currentStep: 0\n  };\n};\nexport const cycleSort = array => {\n  const steps = [];\n  const n = array.length;\n  const arr = [...array];\n  for (let cycleStart = 0; cycleStart < n - 1; cycleStart++) {\n    let item = arr[cycleStart];\n    let pos = cycleStart;\n    for (let i = cycleStart + 1; i < n; i++) {\n      if (arr[i] < item) {\n        pos++;\n      }\n    }\n    if (pos === cycleStart) continue;\n    while (item === arr[pos]) {\n      pos++;\n    }\n    [item, arr[pos]] = [arr[pos], item];\n    steps.push({\n      array: [...arr],\n      activeIndices: [cycleStart, pos],\n      comparingIndices: [],\n      sortedIndices: []\n    });\n    while (pos !== cycleStart) {\n      pos = cycleStart;\n      for (let i = cycleStart + 1; i < n; i++) {\n        if (arr[i] < item) {\n          pos++;\n        }\n      }\n      while (item === arr[pos]) {\n        pos++;\n      }\n      [item, arr[pos]] = [arr[pos], item];\n      steps.push({\n        array: [...arr],\n        activeIndices: [cycleStart, pos],\n        comparingIndices: [],\n        sortedIndices: []\n      });\n    }\n  }\n  steps.push({\n    array: [...arr],\n    activeIndices: [],\n    comparingIndices: [],\n    sortedIndices: Array.from({\n      length: n\n    }, (_, i) => i)\n  });\n  return {\n    array: arr,\n    steps,\n    currentStep: 0\n  };\n};\nexport const pancakeSort = array => {\n  const steps = [];\n  const n = array.length;\n  const arr = [...array];\n  const flip = k => {\n    let start = 0;\n    while (start < k) {\n      [arr[start], arr[k]] = [arr[k], arr[start]];\n      start++;\n      k--;\n    }\n    steps.push({\n      array: [...arr],\n      activeIndices: [start, k],\n      comparingIndices: [],\n      sortedIndices: []\n    });\n  };\n  for (let currSize = n; currSize > 1; currSize--) {\n    let mi = 0;\n    for (let i = 0; i < currSize; i++) {\n      if (arr[i] > arr[mi]) {\n        mi = i;\n      }\n    }\n    if (mi !== currSize - 1) {\n      flip(mi);\n      flip(currSize - 1);\n    }\n  }\n  steps.push({\n    array: [...arr],\n    activeIndices: [],\n    comparingIndices: [],\n    sortedIndices: Array.from({\n      length: n\n    }, (_, i) => i)\n  });\n  return {\n    array: arr,\n    steps,\n    currentStep: 0\n  };\n};\n\n// Aquí se pueden agregar más algoritmos de ordenación...","map":{"version":3,"names":["bubbleSort","array","steps","n","length","arr","i","j","push","activeIndices","sortedIndices","Array","from","_","k","comparingIndices","currentStep","quickSort","partition","low","high","pivot","sort","pi","mergeSort","merge","left","right","start","result","leftIndex","rightIndex","concat","slice","middle","Math","floor","sorted","insertionSort","selectionSort","minIndex","heapSort","heapify","largest","l","r","shellSort","gap","temp","countingSort","max","count","fill","output","radixSort","exp","digit","bucketSort","min","bucketSize","bucketCount","buckets","bucketIndex","index","a","b","cocktailSort","swapped","end","gnomeSort","combSort","shrink","cycleSort","cycleStart","item","pos","pancakeSort","flip","currSize","mi"],"sources":["/Users/santigomez/Desktop/sorting-visualizer/src/utils/sorting.ts"],"sourcesContent":["import { ArrayState, SortingState } from '../types';\n\nexport const bubbleSort = (array: number[]): SortingState => {\n  const steps: ArrayState[] = [];\n  const n = array.length;\n  const arr = [...array];\n\n  for (let i = 0; i < n - 1; i++) {\n    for (let j = 0; j < n - i - 1; j++) {\n      steps.push({\n        array: [...arr],\n        activeIndices: [j, j + 1],\n        sortedIndices: Array.from({ length: i }, (_, k) => n - 1 - k),\n        comparingIndices: [j, j + 1],\n      });\n\n      if (arr[j] > arr[j + 1]) {\n        [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n        steps.push({\n          array: [...arr],\n          activeIndices: [j, j + 1],\n          sortedIndices: Array.from({ length: i }, (_, k) => n - 1 - k),\n          comparingIndices: [j, j + 1],\n        });\n      }\n    }\n  }\n\n  return {\n    array: arr,\n    steps,\n    currentStep: 0,\n  };\n};\n\nexport const quickSort = (array: number[]): SortingState => {\n  const steps: ArrayState[] = [];\n  const arr = [...array];\n\n  const partition = (low: number, high: number): number => {\n    const pivot = arr[high];\n    let i = low - 1;\n\n    for (let j = low; j < high; j++) {\n      steps.push({\n        array: [...arr],\n        activeIndices: [j, high],\n        sortedIndices: [],\n        comparingIndices: [j, high],\n      });\n\n      if (arr[j] < pivot) {\n        i++;\n        [arr[i], arr[j]] = [arr[j], arr[i]];\n        steps.push({\n          array: [...arr],\n          activeIndices: [i, j],\n          sortedIndices: [],\n          comparingIndices: [i, j],\n        });\n      }\n    }\n\n    [arr[i + 1], arr[high]] = [arr[high], arr[i + 1]];\n    steps.push({\n      array: [...arr],\n      activeIndices: [i + 1, high],\n      sortedIndices: [],\n      comparingIndices: [i + 1, high],\n    });\n\n    return i + 1;\n  };\n\n  const sort = (low: number, high: number) => {\n    if (low < high) {\n      const pi = partition(low, high);\n      sort(low, pi - 1);\n      sort(pi + 1, high);\n    }\n  };\n\n  sort(0, arr.length - 1);\n\n  return {\n    array: arr,\n    steps,\n    currentStep: 0,\n  };\n};\n\nexport const mergeSort = (array: number[]): SortingState => {\n  const steps: ArrayState[] = [];\n  const arr = [...array];\n\n  const merge = (left: number[], right: number[], start: number): number[] => {\n    const result: number[] = [];\n    let leftIndex = 0;\n    let rightIndex = 0;\n\n    while (leftIndex < left.length && rightIndex < right.length) {\n      steps.push({\n        array: [...arr],\n        activeIndices: [start + leftIndex, start + left.length + rightIndex],\n        sortedIndices: [],\n        comparingIndices: [start + leftIndex, start + left.length + rightIndex],\n      });\n\n      if (left[leftIndex] < right[rightIndex]) {\n        result.push(left[leftIndex]);\n        leftIndex++;\n      } else {\n        result.push(right[rightIndex]);\n        rightIndex++;\n      }\n    }\n\n    return result.concat(left.slice(leftIndex)).concat(right.slice(rightIndex));\n  };\n\n  const sort = (arr: number[], start = 0): number[] => {\n    if (arr.length <= 1) return arr;\n\n    const middle = Math.floor(arr.length / 2);\n    const left = arr.slice(0, middle);\n    const right = arr.slice(middle);\n\n    return merge(sort(left, start), sort(right, start + middle), start);\n  };\n\n  const sorted = sort(arr);\n  for (let i = 0; i < sorted.length; i++) {\n    arr[i] = sorted[i];\n    steps.push({\n      array: [...arr],\n      activeIndices: [i],\n      sortedIndices: Array.from({ length: i }, (_, k) => k),\n      comparingIndices: [i],\n    });\n  }\n\n  return {\n    array: arr,\n    steps,\n    currentStep: 0,\n  };\n};\n\nexport const insertionSort = (array: number[]): SortingState => {\n  const steps: ArrayState[] = [];\n  const arr = [...array];\n\n  for (let i = 1; i < arr.length; i++) {\n    let j = i;\n    while (j > 0 && arr[j - 1] > arr[j]) {\n      steps.push({\n        array: [...arr],\n        activeIndices: [j - 1, j],\n        sortedIndices: Array.from({ length: i }, (_, k) => k),\n        comparingIndices: [j - 1, j],\n      });\n\n      [arr[j - 1], arr[j]] = [arr[j], arr[j - 1]];\n      j--;\n\n      steps.push({\n        array: [...arr],\n        activeIndices: [j, j + 1],\n        sortedIndices: Array.from({ length: i }, (_, k) => k),\n        comparingIndices: [j, j + 1],\n      });\n    }\n  }\n\n  return {\n    array: arr,\n    steps,\n    currentStep: 0,\n  };\n};\n\nexport const selectionSort = (array: number[]): SortingState => {\n  const steps: ArrayState[] = [];\n  const arr = [...array];\n\n  for (let i = 0; i < arr.length - 1; i++) {\n    let minIndex = i;\n    for (let j = i + 1; j < arr.length; j++) {\n      steps.push({\n        array: [...arr],\n        activeIndices: [minIndex, j],\n        sortedIndices: Array.from({ length: i }, (_, k) => k),\n        comparingIndices: [minIndex, j],\n      });\n\n      if (arr[j] < arr[minIndex]) {\n        minIndex = j;\n      }\n    }\n\n    if (minIndex !== i) {\n      [arr[i], arr[minIndex]] = [arr[minIndex], arr[i]];\n      steps.push({\n        array: [...arr],\n        activeIndices: [i, minIndex],\n        sortedIndices: Array.from({ length: i + 1 }, (_, k) => k),\n        comparingIndices: [i, minIndex],\n      });\n    }\n  }\n\n  return {\n    array: arr,\n    steps,\n    currentStep: 0,\n  };\n};\n\nexport const heapSort = (array: number[]): SortingState => {\n  const steps: ArrayState[] = [];\n  const n = array.length;\n  const arr = [...array];\n\n  const heapify = (arr: number[], n: number, i: number, steps: ArrayState[]) => {\n    let largest = i;\n    const l = 2 * i + 1;\n    const r = 2 * i + 2;\n\n    if (l < n && arr[l] > arr[largest]) {\n      largest = l;\n    }\n\n    if (r < n && arr[r] > arr[largest]) {\n      largest = r;\n    }\n\n    if (largest !== i) {\n      [arr[i], arr[largest]] = [arr[largest], arr[i]];\n      steps.push({\n        array: [...arr],\n        activeIndices: [i, largest],\n        comparingIndices: [l, r],\n        sortedIndices: []\n      });\n      heapify(arr, n, largest, steps);\n    }\n  };\n\n  // Build max heap\n  for (let i = Math.floor(n / 2) - 1; i >= 0; i--) {\n    heapify(arr, n, i, steps);\n  }\n\n  // Extract elements from heap\n  for (let i = n - 1; i > 0; i--) {\n    [arr[0], arr[i]] = [arr[i], arr[0]];\n    steps.push({\n      array: [...arr],\n      activeIndices: [0, i],\n      comparingIndices: [],\n      sortedIndices: Array.from({ length: n - i }, (_, j) => i + j)\n    });\n    heapify(arr, i, 0, steps);\n  }\n\n  steps.push({\n    array: [...arr],\n    activeIndices: [],\n    comparingIndices: [],\n    sortedIndices: Array.from({ length: n }, (_, i) => i)\n  });\n\n  return {\n    array: arr,\n    steps,\n    currentStep: 0\n  };\n};\n\nexport const shellSort = (array: number[]): SortingState => {\n  const steps: ArrayState[] = [];\n  const n = array.length;\n  const arr = [...array];\n\n  for (let gap = Math.floor(n / 2); gap > 0; gap = Math.floor(gap / 2)) {\n    for (let i = gap; i < n; i++) {\n      const temp = arr[i];\n      let j;\n      for (j = i; j >= gap && arr[j - gap] > temp; j -= gap) {\n        arr[j] = arr[j - gap];\n        steps.push({\n          array: [...arr],\n          activeIndices: [j, j - gap],\n          comparingIndices: [i, j - gap],\n          sortedIndices: []\n        });\n      }\n      arr[j] = temp;\n      steps.push({\n        array: [...arr],\n        activeIndices: [j, i],\n        comparingIndices: [i, j],\n        sortedIndices: []\n      });\n    }\n  }\n\n  steps.push({\n    array: [...arr],\n    activeIndices: [],\n    comparingIndices: [],\n    sortedIndices: Array.from({ length: n }, (_, i) => i)\n  });\n\n  return {\n    array: arr,\n    steps,\n    currentStep: 0\n  };\n};\n\nexport const countingSort = (array: number[]): SortingState => {\n  const steps: ArrayState[] = [];\n  const n = array.length;\n  const arr = [...array];\n  const max = Math.max(...arr);\n  const count = new Array(max + 1).fill(0);\n  const output = new Array(n);\n\n  // Count occurrences\n  for (let i = 0; i < n; i++) {\n    count[arr[i]]++;\n    steps.push({\n      array: [...arr],\n      activeIndices: [i],\n      comparingIndices: [arr[i]],\n      sortedIndices: []\n    });\n  }\n\n  // Modify count[i] to store position\n  for (let i = 1; i <= max; i++) {\n    count[i] += count[i - 1];\n  }\n\n  // Build output array\n  for (let i = n - 1; i >= 0; i--) {\n    output[count[arr[i]] - 1] = arr[i];\n    count[arr[i]]--;\n    steps.push({\n      array: [...output],\n      activeIndices: [count[arr[i]]],\n      comparingIndices: [arr[i]],\n      sortedIndices: []\n    });\n  }\n\n  steps.push({\n    array: [...output],\n    activeIndices: [],\n    comparingIndices: [],\n    sortedIndices: Array.from({ length: n }, (_, i) => i)\n  });\n\n  return {\n    array: output,\n    steps,\n    currentStep: 0\n  };\n};\n\nexport const radixSort = (array: number[]): SortingState => {\n  const steps: ArrayState[] = [];\n  const n = array.length;\n  let arr = [...array];\n  const max = Math.max(...arr);\n\n  for (let exp = 1; Math.floor(max / exp) > 0; exp *= 10) {\n    const output = new Array(n);\n    const count = new Array(10).fill(0);\n\n    for (let i = 0; i < n; i++) {\n      count[Math.floor(arr[i] / exp) % 10]++;\n      steps.push({\n        array: [...arr],\n        activeIndices: [i],\n        comparingIndices: [Math.floor(arr[i] / exp) % 10],\n        sortedIndices: []\n      });\n    }\n\n    for (let i = 1; i < 10; i++) {\n      count[i] += count[i - 1];\n    }\n\n    for (let i = n - 1; i >= 0; i--) {\n      const digit = Math.floor(arr[i] / exp) % 10;\n      output[count[digit] - 1] = arr[i];\n      count[digit]--;\n      steps.push({\n        array: [...output],\n        activeIndices: [count[digit]],\n        comparingIndices: [digit],\n        sortedIndices: []\n      });\n    }\n\n    arr = output;\n  }\n\n  steps.push({\n    array: [...arr],\n    activeIndices: [],\n    comparingIndices: [],\n    sortedIndices: Array.from({ length: n }, (_, i) => i)\n  });\n\n  return {\n    array: arr,\n    steps,\n    currentStep: 0\n  };\n};\n\nexport const bucketSort = (array: number[]): SortingState => {\n  const steps: ArrayState[] = [];\n  const n = array.length;\n  const arr = [...array];\n  const max = Math.max(...arr);\n  const min = Math.min(...arr);\n  const bucketSize = 5;\n  const bucketCount = Math.floor((max - min) / bucketSize) + 1;\n  const buckets: number[][] = Array.from({ length: bucketCount }, () => []);\n\n  for (let i = 0; i < n; i++) {\n    const bucketIndex = Math.floor((arr[i] - min) / bucketSize);\n    buckets[bucketIndex].push(arr[i]);\n    steps.push({\n      array: [...arr],\n      activeIndices: [i],\n      comparingIndices: [bucketIndex],\n      sortedIndices: []\n    });\n  }\n\n  let index = 0;\n  for (let i = 0; i < bucketCount; i++) {\n    buckets[i].sort((a, b) => a - b);\n    for (let j = 0; j < buckets[i].length; j++) {\n      arr[index++] = buckets[i][j];\n      steps.push({\n        array: [...arr],\n        activeIndices: [index - 1],\n        comparingIndices: [i, j],\n        sortedIndices: []\n      });\n    }\n  }\n\n  steps.push({\n    array: [...arr],\n    activeIndices: [],\n    comparingIndices: [],\n    sortedIndices: Array.from({ length: n }, (_, i) => i)\n  });\n\n  return {\n    array: arr,\n    steps,\n    currentStep: 0\n  };\n};\n\nexport const cocktailSort = (array: number[]): SortingState => {\n  const steps: ArrayState[] = [];\n  const n = array.length;\n  const arr = [...array];\n  let swapped = true;\n  let start = 0;\n  let end = n - 1;\n\n  while (swapped) {\n    swapped = false;\n\n    for (let i = start; i < end; i++) {\n      if (arr[i] > arr[i + 1]) {\n        [arr[i], arr[i + 1]] = [arr[i + 1], arr[i]];\n        swapped = true;\n        steps.push({\n          array: [...arr],\n          activeIndices: [i, i + 1],\n          comparingIndices: [],\n          sortedIndices: []\n        });\n      }\n    }\n\n    if (!swapped) break;\n\n    swapped = false;\n    end--;\n\n    for (let i = end - 1; i >= start; i--) {\n      if (arr[i] > arr[i + 1]) {\n        [arr[i], arr[i + 1]] = [arr[i + 1], arr[i]];\n        swapped = true;\n        steps.push({\n          array: [...arr],\n          activeIndices: [i, i + 1],\n          comparingIndices: [],\n          sortedIndices: []\n        });\n      }\n    }\n\n    start++;\n  }\n\n  steps.push({\n    array: [...arr],\n    activeIndices: [],\n    comparingIndices: [],\n    sortedIndices: Array.from({ length: n }, (_, i) => i)\n  });\n\n  return {\n    array: arr,\n    steps,\n    currentStep: 0\n  };\n};\n\nexport const gnomeSort = (array: number[]): SortingState => {\n  const steps: ArrayState[] = [];\n  const n = array.length;\n  const arr = [...array];\n  let index = 0;\n\n  while (index < n) {\n    if (index === 0) {\n      index++;\n    }\n    if (arr[index] >= arr[index - 1]) {\n      index++;\n    } else {\n      [arr[index], arr[index - 1]] = [arr[index - 1], arr[index]];\n      steps.push({\n        array: [...arr],\n        activeIndices: [index, index - 1],\n        comparingIndices: [],\n        sortedIndices: []\n      });\n      index--;\n    }\n  }\n\n  steps.push({\n    array: [...arr],\n    activeIndices: [],\n    comparingIndices: [],\n    sortedIndices: Array.from({ length: n }, (_, i) => i)\n  });\n\n  return {\n    array: arr,\n    steps,\n    currentStep: 0\n  };\n};\n\nexport const combSort = (array: number[]): SortingState => {\n  const steps: ArrayState[] = [];\n  const n = array.length;\n  const arr = [...array];\n  let gap = n;\n  let swapped = true;\n  const shrink = 1.3;\n\n  while (gap > 1 || swapped) {\n    gap = Math.floor(gap / shrink);\n    if (gap < 1) gap = 1;\n    swapped = false;\n\n    for (let i = 0; i + gap < n; i++) {\n      if (arr[i] > arr[i + gap]) {\n        [arr[i], arr[i + gap]] = [arr[i + gap], arr[i]];\n        swapped = true;\n        steps.push({\n          array: [...arr],\n          activeIndices: [i, i + gap],\n          comparingIndices: [],\n          sortedIndices: []\n        });\n      }\n    }\n  }\n\n  steps.push({\n    array: [...arr],\n    activeIndices: [],\n    comparingIndices: [],\n    sortedIndices: Array.from({ length: n }, (_, i) => i)\n  });\n\n  return {\n    array: arr,\n    steps,\n    currentStep: 0\n  };\n};\n\nexport const cycleSort = (array: number[]): SortingState => {\n  const steps: ArrayState[] = [];\n  const n = array.length;\n  const arr = [...array];\n\n  for (let cycleStart = 0; cycleStart < n - 1; cycleStart++) {\n    let item = arr[cycleStart];\n    let pos = cycleStart;\n\n    for (let i = cycleStart + 1; i < n; i++) {\n      if (arr[i] < item) {\n        pos++;\n      }\n    }\n\n    if (pos === cycleStart) continue;\n\n    while (item === arr[pos]) {\n      pos++;\n    }\n\n    [item, arr[pos]] = [arr[pos], item];\n    steps.push({\n      array: [...arr],\n      activeIndices: [cycleStart, pos],\n      comparingIndices: [],\n      sortedIndices: []\n    });\n\n    while (pos !== cycleStart) {\n      pos = cycleStart;\n      for (let i = cycleStart + 1; i < n; i++) {\n        if (arr[i] < item) {\n          pos++;\n        }\n      }\n\n      while (item === arr[pos]) {\n        pos++;\n      }\n\n      [item, arr[pos]] = [arr[pos], item];\n      steps.push({\n        array: [...arr],\n        activeIndices: [cycleStart, pos],\n        comparingIndices: [],\n        sortedIndices: []\n      });\n    }\n  }\n\n  steps.push({\n    array: [...arr],\n    activeIndices: [],\n    comparingIndices: [],\n    sortedIndices: Array.from({ length: n }, (_, i) => i)\n  });\n\n  return {\n    array: arr,\n    steps,\n    currentStep: 0\n  };\n};\n\nexport const pancakeSort = (array: number[]): SortingState => {\n  const steps: ArrayState[] = [];\n  const n = array.length;\n  const arr = [...array];\n\n  const flip = (k: number) => {\n    let start = 0;\n    while (start < k) {\n      [arr[start], arr[k]] = [arr[k], arr[start]];\n      start++;\n      k--;\n    }\n    steps.push({\n      array: [...arr],\n      activeIndices: [start, k],\n      comparingIndices: [],\n      sortedIndices: []\n    });\n  };\n\n  for (let currSize = n; currSize > 1; currSize--) {\n    let mi = 0;\n    for (let i = 0; i < currSize; i++) {\n      if (arr[i] > arr[mi]) {\n        mi = i;\n      }\n    }\n\n    if (mi !== currSize - 1) {\n      flip(mi);\n      flip(currSize - 1);\n    }\n  }\n\n  steps.push({\n    array: [...arr],\n    activeIndices: [],\n    comparingIndices: [],\n    sortedIndices: Array.from({ length: n }, (_, i) => i)\n  });\n\n  return {\n    array: arr,\n    steps,\n    currentStep: 0\n  };\n};\n\n// Aquí se pueden agregar más algoritmos de ordenación... "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}